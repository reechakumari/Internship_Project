{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\frontend\\\\src\\\\component\\\\Card.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, CardBody, Text } from 'grommet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cardd = ({\n  card,\n  ...rest\n}) => {\n  const {\n    background,\n    cta,\n    description,\n    descriptionColor,\n    icon,\n    title\n  } = card;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    background: background || 'background',\n    elevation: \"medium\",\n    fill: true,\n    ...rest,\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      gap: \"small\",\n      align: \"start\",\n      flex: \"grow\",\n      children: [icon, /*#__PURE__*/_jsxDEV(Text, {\n        size: \"large\",\n        weight: \"bold\",\n        color: \"text-strong\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: descriptionColor,\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), typeof cta === 'string' ? /*#__PURE__*/_jsxDEV(Button, {\n        label: cta,\n        secondary: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 36\n      }, this) : cta]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}; // Card.propTypes = {\n//   card: PropTypes.shape({\n//     background: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({})]),\n//     cta: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n//     description: PropTypes.string,\n//     descriptionColor: PropTypes.string,\n//     icon: PropTypes.element,\n//     title: PropTypes.string,\n//   }).isRequired,\n// };\n\n\n_c = Cardd;\nexport default Cardd;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cardd\");","map":{"version":3,"sources":["D:/React/frontend/src/component/Card.js"],"names":["React","PropTypes","Button","Card","CardBody","Text","Cardd","card","rest","background","cta","description","descriptionColor","icon","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,IAAjC,QAA6C,SAA7C;;;AAIA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQ,KAAGC;AAAX,CAAD,KAAuB;AACnC,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,GAAd;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA,gBAAhC;AAAkDC,IAAAA,IAAlD;AAAwDC,IAAAA;AAAxD,MAAkEP,IAAxE;AACA,sBACE,QAAC,IAAD;AACE,IAAA,UAAU,EAAEE,UAAU,IAAI,YAD5B;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,IAAI,MAHN;AAAA,OAIMD,IAJN;AAAA,2BAME,QAAC,QAAD;AAAU,MAAA,GAAG,EAAC,OAAd;AAAsB,MAAA,KAAK,EAAC,OAA5B;AAAoC,MAAA,IAAI,EAAC,MAAzC;AAAA,iBACGK,IADH,eAEE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,MAAM,EAAC,MAA1B;AAAiC,QAAA,KAAK,EAAC,aAAvC;AAAA,kBACGC;AADH;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,gBAAb;AAAA,kBAAgCD;AAAhC;AAAA;AAAA;AAAA;AAAA,cALF,EAMG,OAAOD,GAAP,KAAe,QAAf,gBAA0B,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAEA,GAAf;AAAoB,QAAA,SAAS;AAA7B;AAAA;AAAA;AAAA;AAAA,cAA1B,GAA6DA,GANhE;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAnBD,C,CAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA9BMJ,K;AAiCN,eAAeA,KAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Card, CardBody, Text } from 'grommet';\r\n\r\n\r\n\r\nconst Cardd = ({ card, ...rest }) => {\r\n  const { background, cta, description, descriptionColor, icon, title } = card;\r\n  return (\r\n    <Card\r\n      background={background || 'background'}\r\n      elevation=\"medium\"\r\n      fill\r\n      {...rest}\r\n    >\r\n      <CardBody gap=\"small\" align=\"start\" flex=\"grow\">\r\n        {icon}\r\n        <Text size=\"large\" weight=\"bold\" color=\"text-strong\">\r\n          {title}\r\n        </Text>\r\n        <Text color={descriptionColor}>{description}</Text>\r\n        {typeof cta === 'string' ? <Button label={cta} secondary /> : cta}\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// Card.propTypes = {\r\n//   card: PropTypes.shape({\r\n//     background: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({})]),\r\n//     cta: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\r\n//     description: PropTypes.string,\r\n//     descriptionColor: PropTypes.string,\r\n//     icon: PropTypes.element,\r\n//     title: PropTypes.string,\r\n//   }).isRequired,\r\n// };\r\n\r\n\r\nexport default Cardd;"]},"metadata":{},"sourceType":"module"}