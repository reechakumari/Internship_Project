{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { FormContext } from '../Form/FormContext';\nimport { AnnounceContext } from '../../contexts';\nimport { isNodeAfterScroll, isNodeBeforeScroll, sizeStyle, useForwardedRef } from '../../utils';\nimport { StyledTextInput, StyledTextInputContainer, StyledPlaceholder, StyledIcon, StyledSuggestions } from './StyledTextInput';\n\nvar renderLabel = function renderLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    return suggestion.label || suggestion.value;\n  }\n\n  return suggestion;\n};\n\nvar stringLabel = function stringLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    if (suggestion.label && typeof suggestion.label === 'string') {\n      return suggestion.label;\n    }\n\n    return suggestion.value;\n  }\n\n  return suggestion;\n};\n\nvar ContainerBox = styled(Box).withConfig({\n  displayName: \"TextInput__ContainerBox\",\n  componentId: \"sc-1ai0c08-0\"\n})([\"\", \";@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\"], function (props) {\n  return props.dropHeight ? sizeStyle('max-height', props.dropHeight, props.theme) : 'max-height: inherit;';\n});\nvar defaultDropAlign = {\n  top: 'bottom',\n  left: 'left'\n};\nvar defaultMessages = {\n  enterSelect: '(Press Enter to Select)',\n  suggestionsCount: 'suggestions available',\n  suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n  suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n};\nvar TextInput = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      defaultSuggestion = _ref.defaultSuggestion,\n      defaultValue = _ref.defaultValue,\n      _ref$dropAlign = _ref.dropAlign,\n      dropAlign = _ref$dropAlign === void 0 ? defaultDropAlign : _ref$dropAlign,\n      dropHeight = _ref.dropHeight,\n      dropTarget = _ref.dropTarget,\n      dropProps = _ref.dropProps,\n      icon = _ref.icon,\n      id = _ref.id,\n      _ref$messages = _ref.messages,\n      messages = _ref$messages === void 0 ? defaultMessages : _ref$messages,\n      name = _ref.name,\n      _onBlur = _ref.onBlur,\n      onChange = _ref.onChange,\n      _onFocus = _ref.onFocus,\n      onKeyDown = _ref.onKeyDown,\n      onSelect = _ref.onSelect,\n      onSuggestionSelect = _ref.onSuggestionSelect,\n      onSuggestionsClose = _ref.onSuggestionsClose,\n      onSuggestionsOpen = _ref.onSuggestionsOpen,\n      placeholder = _ref.placeholder,\n      plain = _ref.plain,\n      readOnly = _ref.readOnly,\n      reverse = _ref.reverse,\n      suggestions = _ref.suggestions,\n      textAlign = _ref.textAlign,\n      valueProp = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"defaultSuggestion\", \"defaultValue\", \"dropAlign\", \"dropHeight\", \"dropTarget\", \"dropProps\", \"icon\", \"id\", \"messages\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onSelect\", \"onSuggestionSelect\", \"onSuggestionsClose\", \"onSuggestionsOpen\", \"placeholder\", \"plain\", \"readOnly\", \"reverse\", \"suggestions\", \"textAlign\", \"value\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var announce = useContext(AnnounceContext);\n  var formContext = useContext(FormContext);\n  var inputRef = useForwardedRef(ref);\n  var dropRef = useRef();\n  var suggestionsRef = useRef(); // if this is a readOnly property, don't set a name with the form context\n  // this allows Select to control the form context for the name.\n\n  var _formContext$useFormI = formContext.useFormInput(readOnly ? undefined : name, valueProp),\n      value = _formContext$useFormI[0],\n      setValue = _formContext$useFormI[1];\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var _useState2 = useState(false),\n      showDrop = _useState2[0],\n      setShowDrop = _useState2[1];\n\n  var handleSuggestionSelect = useMemo(function () {\n    return onSelect && !onSuggestionSelect ? onSelect : onSuggestionSelect;\n  }, [onSelect, onSuggestionSelect]);\n  var handleTextSelect = useMemo(function () {\n    return onSelect && onSuggestionSelect ? onSelect : undefined;\n  }, [onSelect, onSuggestionSelect]);\n\n  var _useState3 = useState(),\n      suggestionsAtClose = _useState3[0],\n      setSuggestionsAtClose = _useState3[1];\n\n  var openDrop = useCallback(function () {\n    setShowDrop(true);\n    announce(messages.suggestionIsOpen);\n    announce(suggestions.length + \" \" + messages.suggestionsCount);\n    if (onSuggestionsOpen) onSuggestionsOpen();\n  }, [announce, messages.suggestionsCount, messages.suggestionIsOpen, onSuggestionsOpen, suggestions]);\n  var closeDrop = useCallback(function () {\n    setSuggestionsAtClose(suggestions); // must be before closing drop\n\n    setShowDrop(false);\n    if (messages.onSuggestionsClose) onSuggestionsClose();\n    if (onSuggestionsClose) onSuggestionsClose();\n  }, [messages.onSuggestionsClose, onSuggestionsClose, suggestions]); // Handle scenarios where we have focus, the drop isn't showing,\n  // and the suggestions change. We don't want to open the drop if\n  // the drop has been closed by onEsc and the suggestions haven't\n  // changed. So, we remember the suggestions we are showing when\n  // the drop was closed and only re-open it when the suggestions\n  // subsequently change.\n\n  useEffect(function () {\n    if (focus && !showDrop && suggestions && suggestions.length && (!suggestionsAtClose || suggestionsAtClose.length !== suggestions.length)) {\n      openDrop();\n    }\n  }, [focus, openDrop, showDrop, suggestions, suggestionsAtClose]); // if we have no suggestions, close drop if it's open\n\n  useEffect(function () {\n    if (showDrop && (!suggestions || !suggestions.length)) closeDrop();\n  }, [closeDrop, showDrop, suggestions]);\n  var valueSuggestionIndex = useMemo(function () {\n    return suggestions ? suggestions.map(function (suggestion) {\n      return typeof suggestion === 'object' ? suggestion.value : suggestion;\n    }).indexOf(value) : -1;\n  }, [suggestions, value]); // choose the best suggestion, either the explicit default or the one\n  // that matches the current value\n\n  var resetSuggestionIndex = useMemo(function () {\n    if (valueSuggestionIndex === -1 && typeof defaultSuggestion === 'number') {\n      return defaultSuggestion;\n    }\n\n    return valueSuggestionIndex;\n  }, [defaultSuggestion, valueSuggestionIndex]); // activeSuggestionIndex unifies mouse and keyboard interaction of\n  // the suggestions\n\n  var _useState4 = useState(resetSuggestionIndex),\n      activeSuggestionIndex = _useState4[0],\n      setActiveSuggestionIndex = _useState4[1]; // Only update active suggestion index when the mouse actually moves,\n  // not when suggestions are moving under the mouse.\n\n\n  var _useState5 = useState(),\n      mouseMovedSinceLastKey = _useState5[0],\n      setMouseMovedSinceLastKey = _useState5[1]; // set activeSuggestionIndex when value changes\n\n\n  useEffect(function () {\n    return setActiveSuggestionIndex(valueSuggestionIndex);\n  }, [valueSuggestionIndex]); // reset activeSuggestionIndex when the drop is closed\n\n  useEffect(function () {\n    if (!showDrop) setActiveSuggestionIndex(resetSuggestionIndex);\n  }, [resetSuggestionIndex, showDrop]); // announce active suggestion\n\n  useEffect(function () {\n    if (activeSuggestionIndex >= 0) {\n      var label = stringLabel(suggestions[activeSuggestionIndex]);\n      announce(label + \" \" + messages.enterSelect);\n    }\n  }, [activeSuggestionIndex, announce, messages, suggestions]); // make sure activeSuggestion is visible in scroll\n\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      var list = suggestionsRef.current;\n\n      if (showDrop && activeSuggestionIndex !== -1 && list) {\n        var container = list.parentNode;\n        var item = list.children[activeSuggestionIndex];\n\n        if (container.scrollTo) {\n          if (isNodeAfterScroll(item, container)) container.scrollTo(0, item.offsetTop - (container.getBoundingClientRect().height - item.getBoundingClientRect().height));else if (isNodeBeforeScroll(item, container)) container.scrollTo(0, item.offsetTop);\n        }\n      }\n    }, 50); // delay to allow Drop to animate in\n\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [activeSuggestionIndex, showDrop]);\n\n  var setValueFromSuggestion = function setValueFromSuggestion(event, suggestion) {\n    // if we stole the focus in the drop, perhaps by interacting with\n    // a suggestion button or the scrollbar, give it back\n    inputRef.current.focus();\n    inputRef.current.value = suggestion; // needed for uncontrolled cases\n\n    closeDrop();\n\n    if (handleSuggestionSelect) {\n      if (event.persist) event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.suggestion = suggestion;\n      handleSuggestionSelect(adjustedEvent);\n    }\n\n    setValue(suggestion);\n  };\n\n  var onNextSuggestion = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.min(activeSuggestionIndex + 1, suggestions.length - 1);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex, suggestions]);\n  var onPreviousSuggestion = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.max(activeSuggestionIndex - 1, 0);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex]);\n\n  var _useState6 = useState(placeholder && typeof placeholder !== 'string' && !(inputRef.current && inputRef.current.value) && !value),\n      showStyledPlaceholder = _useState6[0],\n      setShowStyledPlaceholder = _useState6[1];\n\n  var drop;\n  var extraProps = {\n    onSelect: handleTextSelect\n  };\n\n  if (showDrop) {\n    drop = /*#__PURE__*/React.createElement(Drop, _extends({\n      ref: dropRef,\n      id: id ? \"text-input-drop__\" + id : undefined,\n      align: dropAlign,\n      responsive: false,\n      target: dropTarget || inputRef.current,\n      onClickOutside: closeDrop,\n      onEsc: closeDrop\n    }, dropProps), /*#__PURE__*/React.createElement(ContainerBox, {\n      overflow: \"auto\",\n      dropHeight: dropHeight,\n      onMouseMove: function onMouseMove() {\n        return setMouseMovedSinceLastKey(true);\n      }\n    }, /*#__PURE__*/React.createElement(StyledSuggestions, {\n      ref: suggestionsRef\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      items: suggestions,\n      step: theme.select.step,\n      show: activeSuggestionIndex !== -1 ? activeSuggestionIndex : undefined\n    }, function (suggestion, index, itemRef) {\n      // Determine whether the label is done as a child or\n      // as an option Button kind property.\n      var renderedLabel = renderLabel(suggestion);\n      var child;\n      if (typeof renderedLabel !== 'string') // must be an element rendered by suggestions.label\n        child = renderedLabel;else if (!theme.button.option) // don't have theme support, need to layout here\n        child = /*#__PURE__*/React.createElement(Box, {\n          align: \"start\",\n          pad: \"small\"\n        }, renderedLabel); // if we have a child, turn on plain\n\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: stringLabel(suggestion) + \"-\" + index,\n        ref: itemRef\n      }, /*#__PURE__*/React.createElement(Button, {\n        active: activeSuggestionIndex === index,\n        fill: true,\n        plain: !child ? undefined : true,\n        align: \"start\",\n        kind: !child ? 'option' : undefined,\n        label: !child ? renderedLabel : undefined,\n        onClick: function onClick(event) {\n          return setValueFromSuggestion(event, suggestion);\n        },\n        onMouseMove: mouseMovedSinceLastKey && activeSuggestionIndex !== index ? function () {\n          return setActiveSuggestionIndex(index);\n        } : undefined\n      }, child));\n    }))));\n  }\n\n  var keyboardProps = {\n    onKeyDown: onKeyDown\n  };\n\n  if (showDrop) {\n    keyboardProps.onEnter = function (event) {\n      // prevent submitting forms via Enter when the drop is open\n      event.preventDefault();\n      if (activeSuggestionIndex >= 0) setValueFromSuggestion(event, suggestions[activeSuggestionIndex]);else closeDrop();\n    };\n\n    if (activeSuggestionIndex > 0) keyboardProps.onUp = onPreviousSuggestion;\n    if (activeSuggestionIndex < suggestions.length - 1) keyboardProps.onDown = onNextSuggestion;\n    keyboardProps.onTab = closeDrop;\n  } else if (suggestions && suggestions.length > 0) {\n    keyboardProps.onDown = openDrop;\n  } // For the Keyboard target below, if we have focus,\n  // either on the input element or within the drop,\n  // then we set the target to the document,\n  // otherwise we only listen to onDown on the input element itself,\n  // primarily for tests.\n\n\n  return /*#__PURE__*/React.createElement(StyledTextInputContainer, {\n    plain: plain\n  }, showStyledPlaceholder && /*#__PURE__*/React.createElement(StyledPlaceholder, null, placeholder), icon && /*#__PURE__*/React.createElement(StyledIcon, {\n    reverse: reverse,\n    theme: theme\n  }, icon), /*#__PURE__*/React.createElement(Keyboard, _extends({\n    target: focus ? 'document' : undefined\n  }, keyboardProps), /*#__PURE__*/React.createElement(StyledTextInput, _extends({\n    \"aria-label\": a11yTitle,\n    ref: inputRef,\n    id: id,\n    name: name,\n    autoComplete: \"off\",\n    plain: plain,\n    placeholder: typeof placeholder === 'string' ? placeholder : undefined,\n    icon: icon,\n    reverse: reverse,\n    focus: focus,\n    textAlign: textAlign\n  }, rest, extraProps, {\n    defaultValue: renderLabel(defaultValue),\n    value: renderLabel(value),\n    readOnly: readOnly,\n    onFocus: function onFocus(event) {\n      // Don't do anything if we are acting like we already have\n      // focus. This can happen when this input loses focus temporarily\n      // to our drop, see onBlur() handler below.\n      if (!focus) {\n        setFocus(true);\n\n        if (suggestions && suggestions.length > 0) {\n          announce(messages.suggestionsExist);\n          openDrop();\n        }\n\n        if (_onFocus) _onFocus(event);\n      }\n    },\n    onBlur: function onBlur(event) {\n      // Only treat it as a blur if the element receiving focus\n      // isn't in our drop. The relatedTarget will be our drop\n      // when the user clicks on a suggestion or interacts with the\n      // scrollbar in the drop.\n      if (!event.relatedTarget || event.relatedTarget !== dropRef.current) {\n        setFocus(false);\n        if (_onBlur) _onBlur(event);\n      }\n    },\n    onChange: readOnly ? undefined : function (event) {\n      // when TextInput is not contained in a Form, no re-render\n      // will come from this onChange and remove the placeholder\n      // so we need to update state to ensure the styled\n      // placeholder only appears when there is no value\n      setShowStyledPlaceholder(placeholder && typeof placeholder !== 'string' && !event.target.value);\n      setValue(event.target.value);\n      setActiveSuggestionIndex(-1);\n      if (onChange) onChange(event);\n    }\n  }))), drop);\n});\nTextInput.displayName = 'TextInput';\nvar TextInputDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  TextInputDoc = require('./doc').doc(TextInput);\n}\n\nvar TextInputWrapper = TextInputDoc || TextInput;\nexport { TextInputWrapper as TextInput };","map":{"version":3,"sources":["D:/React/HPE/frontend/node_modules/grommet/es6/components/TextInput/TextInput.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","React","forwardRef","useCallback","useContext","useEffect","useMemo","useRef","useState","styled","ThemeContext","defaultProps","Box","Button","Drop","InfiniteScroll","Keyboard","FormContext","AnnounceContext","isNodeAfterScroll","isNodeBeforeScroll","sizeStyle","useForwardedRef","StyledTextInput","StyledTextInputContainer","StyledPlaceholder","StyledIcon","StyledSuggestions","renderLabel","suggestion","label","value","stringLabel","ContainerBox","withConfig","displayName","componentId","props","dropHeight","theme","defaultDropAlign","top","left","defaultMessages","enterSelect","suggestionsCount","suggestionsExist","suggestionIsOpen","TextInput","_ref","ref","a11yTitle","defaultSuggestion","defaultValue","_ref$dropAlign","dropAlign","dropTarget","dropProps","icon","id","_ref$messages","messages","name","_onBlur","onBlur","onChange","_onFocus","onFocus","onKeyDown","onSelect","onSuggestionSelect","onSuggestionsClose","onSuggestionsOpen","placeholder","plain","readOnly","reverse","suggestions","textAlign","valueProp","rest","announce","formContext","inputRef","dropRef","suggestionsRef","_formContext$useFormI","useFormInput","undefined","setValue","_useState","focus","setFocus","_useState2","showDrop","setShowDrop","handleSuggestionSelect","handleTextSelect","_useState3","suggestionsAtClose","setSuggestionsAtClose","openDrop","closeDrop","valueSuggestionIndex","map","resetSuggestionIndex","_useState4","activeSuggestionIndex","setActiveSuggestionIndex","_useState5","mouseMovedSinceLastKey","setMouseMovedSinceLastKey","timer","setTimeout","list","current","container","parentNode","item","children","scrollTo","offsetTop","getBoundingClientRect","height","clearTimeout","setValueFromSuggestion","event","persist","adjustedEvent","onNextSuggestion","preventDefault","nextActiveIndex","Math","min","onPreviousSuggestion","max","_useState6","showStyledPlaceholder","setShowStyledPlaceholder","drop","extraProps","createElement","align","responsive","onClickOutside","onEsc","overflow","onMouseMove","items","step","select","show","index","itemRef","renderedLabel","child","button","option","pad","active","fill","kind","onClick","keyboardProps","onEnter","onUp","onDown","onTab","autoComplete","relatedTarget","TextInputDoc","process","env","NODE_ENV","require","doc","TextInputWrapper"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Drop } from '../Drop';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { FormContext } from '../Form/FormContext';\nimport { AnnounceContext } from '../../contexts';\nimport { isNodeAfterScroll, isNodeBeforeScroll, sizeStyle, useForwardedRef } from '../../utils';\nimport { StyledTextInput, StyledTextInputContainer, StyledPlaceholder, StyledIcon, StyledSuggestions } from './StyledTextInput';\n\nvar renderLabel = function renderLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    return suggestion.label || suggestion.value;\n  }\n\n  return suggestion;\n};\n\nvar stringLabel = function stringLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    if (suggestion.label && typeof suggestion.label === 'string') {\n      return suggestion.label;\n    }\n\n    return suggestion.value;\n  }\n\n  return suggestion;\n};\n\nvar ContainerBox = styled(Box).withConfig({\n  displayName: \"TextInput__ContainerBox\",\n  componentId: \"sc-1ai0c08-0\"\n})([\"\", \";@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\"], function (props) {\n  return props.dropHeight ? sizeStyle('max-height', props.dropHeight, props.theme) : 'max-height: inherit;';\n});\nvar defaultDropAlign = {\n  top: 'bottom',\n  left: 'left'\n};\nvar defaultMessages = {\n  enterSelect: '(Press Enter to Select)',\n  suggestionsCount: 'suggestions available',\n  suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n  suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n};\nvar TextInput = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      defaultSuggestion = _ref.defaultSuggestion,\n      defaultValue = _ref.defaultValue,\n      _ref$dropAlign = _ref.dropAlign,\n      dropAlign = _ref$dropAlign === void 0 ? defaultDropAlign : _ref$dropAlign,\n      dropHeight = _ref.dropHeight,\n      dropTarget = _ref.dropTarget,\n      dropProps = _ref.dropProps,\n      icon = _ref.icon,\n      id = _ref.id,\n      _ref$messages = _ref.messages,\n      messages = _ref$messages === void 0 ? defaultMessages : _ref$messages,\n      name = _ref.name,\n      _onBlur = _ref.onBlur,\n      onChange = _ref.onChange,\n      _onFocus = _ref.onFocus,\n      onKeyDown = _ref.onKeyDown,\n      onSelect = _ref.onSelect,\n      onSuggestionSelect = _ref.onSuggestionSelect,\n      onSuggestionsClose = _ref.onSuggestionsClose,\n      onSuggestionsOpen = _ref.onSuggestionsOpen,\n      placeholder = _ref.placeholder,\n      plain = _ref.plain,\n      readOnly = _ref.readOnly,\n      reverse = _ref.reverse,\n      suggestions = _ref.suggestions,\n      textAlign = _ref.textAlign,\n      valueProp = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"defaultSuggestion\", \"defaultValue\", \"dropAlign\", \"dropHeight\", \"dropTarget\", \"dropProps\", \"icon\", \"id\", \"messages\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onSelect\", \"onSuggestionSelect\", \"onSuggestionsClose\", \"onSuggestionsOpen\", \"placeholder\", \"plain\", \"readOnly\", \"reverse\", \"suggestions\", \"textAlign\", \"value\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var announce = useContext(AnnounceContext);\n  var formContext = useContext(FormContext);\n  var inputRef = useForwardedRef(ref);\n  var dropRef = useRef();\n  var suggestionsRef = useRef(); // if this is a readOnly property, don't set a name with the form context\n  // this allows Select to control the form context for the name.\n\n  var _formContext$useFormI = formContext.useFormInput(readOnly ? undefined : name, valueProp),\n      value = _formContext$useFormI[0],\n      setValue = _formContext$useFormI[1];\n\n  var _useState = useState(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var _useState2 = useState(false),\n      showDrop = _useState2[0],\n      setShowDrop = _useState2[1];\n\n  var handleSuggestionSelect = useMemo(function () {\n    return onSelect && !onSuggestionSelect ? onSelect : onSuggestionSelect;\n  }, [onSelect, onSuggestionSelect]);\n  var handleTextSelect = useMemo(function () {\n    return onSelect && onSuggestionSelect ? onSelect : undefined;\n  }, [onSelect, onSuggestionSelect]);\n\n  var _useState3 = useState(),\n      suggestionsAtClose = _useState3[0],\n      setSuggestionsAtClose = _useState3[1];\n\n  var openDrop = useCallback(function () {\n    setShowDrop(true);\n    announce(messages.suggestionIsOpen);\n    announce(suggestions.length + \" \" + messages.suggestionsCount);\n    if (onSuggestionsOpen) onSuggestionsOpen();\n  }, [announce, messages.suggestionsCount, messages.suggestionIsOpen, onSuggestionsOpen, suggestions]);\n  var closeDrop = useCallback(function () {\n    setSuggestionsAtClose(suggestions); // must be before closing drop\n\n    setShowDrop(false);\n    if (messages.onSuggestionsClose) onSuggestionsClose();\n    if (onSuggestionsClose) onSuggestionsClose();\n  }, [messages.onSuggestionsClose, onSuggestionsClose, suggestions]); // Handle scenarios where we have focus, the drop isn't showing,\n  // and the suggestions change. We don't want to open the drop if\n  // the drop has been closed by onEsc and the suggestions haven't\n  // changed. So, we remember the suggestions we are showing when\n  // the drop was closed and only re-open it when the suggestions\n  // subsequently change.\n\n  useEffect(function () {\n    if (focus && !showDrop && suggestions && suggestions.length && (!suggestionsAtClose || suggestionsAtClose.length !== suggestions.length)) {\n      openDrop();\n    }\n  }, [focus, openDrop, showDrop, suggestions, suggestionsAtClose]); // if we have no suggestions, close drop if it's open\n\n  useEffect(function () {\n    if (showDrop && (!suggestions || !suggestions.length)) closeDrop();\n  }, [closeDrop, showDrop, suggestions]);\n  var valueSuggestionIndex = useMemo(function () {\n    return suggestions ? suggestions.map(function (suggestion) {\n      return typeof suggestion === 'object' ? suggestion.value : suggestion;\n    }).indexOf(value) : -1;\n  }, [suggestions, value]); // choose the best suggestion, either the explicit default or the one\n  // that matches the current value\n\n  var resetSuggestionIndex = useMemo(function () {\n    if (valueSuggestionIndex === -1 && typeof defaultSuggestion === 'number') {\n      return defaultSuggestion;\n    }\n\n    return valueSuggestionIndex;\n  }, [defaultSuggestion, valueSuggestionIndex]); // activeSuggestionIndex unifies mouse and keyboard interaction of\n  // the suggestions\n\n  var _useState4 = useState(resetSuggestionIndex),\n      activeSuggestionIndex = _useState4[0],\n      setActiveSuggestionIndex = _useState4[1]; // Only update active suggestion index when the mouse actually moves,\n  // not when suggestions are moving under the mouse.\n\n\n  var _useState5 = useState(),\n      mouseMovedSinceLastKey = _useState5[0],\n      setMouseMovedSinceLastKey = _useState5[1]; // set activeSuggestionIndex when value changes\n\n\n  useEffect(function () {\n    return setActiveSuggestionIndex(valueSuggestionIndex);\n  }, [valueSuggestionIndex]); // reset activeSuggestionIndex when the drop is closed\n\n  useEffect(function () {\n    if (!showDrop) setActiveSuggestionIndex(resetSuggestionIndex);\n  }, [resetSuggestionIndex, showDrop]); // announce active suggestion\n\n  useEffect(function () {\n    if (activeSuggestionIndex >= 0) {\n      var label = stringLabel(suggestions[activeSuggestionIndex]);\n      announce(label + \" \" + messages.enterSelect);\n    }\n  }, [activeSuggestionIndex, announce, messages, suggestions]); // make sure activeSuggestion is visible in scroll\n\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      var list = suggestionsRef.current;\n\n      if (showDrop && activeSuggestionIndex !== -1 && list) {\n        var container = list.parentNode;\n        var item = list.children[activeSuggestionIndex];\n\n        if (container.scrollTo) {\n          if (isNodeAfterScroll(item, container)) container.scrollTo(0, item.offsetTop - (container.getBoundingClientRect().height - item.getBoundingClientRect().height));else if (isNodeBeforeScroll(item, container)) container.scrollTo(0, item.offsetTop);\n        }\n      }\n    }, 50); // delay to allow Drop to animate in\n\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [activeSuggestionIndex, showDrop]);\n\n  var setValueFromSuggestion = function setValueFromSuggestion(event, suggestion) {\n    // if we stole the focus in the drop, perhaps by interacting with\n    // a suggestion button or the scrollbar, give it back\n    inputRef.current.focus();\n    inputRef.current.value = suggestion; // needed for uncontrolled cases\n\n    closeDrop();\n\n    if (handleSuggestionSelect) {\n      if (event.persist) event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.suggestion = suggestion;\n      handleSuggestionSelect(adjustedEvent);\n    }\n\n    setValue(suggestion);\n  };\n\n  var onNextSuggestion = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.min(activeSuggestionIndex + 1, suggestions.length - 1);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex, suggestions]);\n  var onPreviousSuggestion = useCallback(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.max(activeSuggestionIndex - 1, 0);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex]);\n\n  var _useState6 = useState(placeholder && typeof placeholder !== 'string' && !(inputRef.current && inputRef.current.value) && !value),\n      showStyledPlaceholder = _useState6[0],\n      setShowStyledPlaceholder = _useState6[1];\n\n  var drop;\n  var extraProps = {\n    onSelect: handleTextSelect\n  };\n\n  if (showDrop) {\n    drop = /*#__PURE__*/React.createElement(Drop, _extends({\n      ref: dropRef,\n      id: id ? \"text-input-drop__\" + id : undefined,\n      align: dropAlign,\n      responsive: false,\n      target: dropTarget || inputRef.current,\n      onClickOutside: closeDrop,\n      onEsc: closeDrop\n    }, dropProps), /*#__PURE__*/React.createElement(ContainerBox, {\n      overflow: \"auto\",\n      dropHeight: dropHeight,\n      onMouseMove: function onMouseMove() {\n        return setMouseMovedSinceLastKey(true);\n      }\n    }, /*#__PURE__*/React.createElement(StyledSuggestions, {\n      ref: suggestionsRef\n    }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n      items: suggestions,\n      step: theme.select.step,\n      show: activeSuggestionIndex !== -1 ? activeSuggestionIndex : undefined\n    }, function (suggestion, index, itemRef) {\n      // Determine whether the label is done as a child or\n      // as an option Button kind property.\n      var renderedLabel = renderLabel(suggestion);\n      var child;\n      if (typeof renderedLabel !== 'string') // must be an element rendered by suggestions.label\n        child = renderedLabel;else if (!theme.button.option) // don't have theme support, need to layout here\n        child = /*#__PURE__*/React.createElement(Box, {\n          align: \"start\",\n          pad: \"small\"\n        }, renderedLabel); // if we have a child, turn on plain\n\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: stringLabel(suggestion) + \"-\" + index,\n        ref: itemRef\n      }, /*#__PURE__*/React.createElement(Button, {\n        active: activeSuggestionIndex === index,\n        fill: true,\n        plain: !child ? undefined : true,\n        align: \"start\",\n        kind: !child ? 'option' : undefined,\n        label: !child ? renderedLabel : undefined,\n        onClick: function onClick(event) {\n          return setValueFromSuggestion(event, suggestion);\n        },\n        onMouseMove: mouseMovedSinceLastKey && activeSuggestionIndex !== index ? function () {\n          return setActiveSuggestionIndex(index);\n        } : undefined\n      }, child));\n    }))));\n  }\n\n  var keyboardProps = {\n    onKeyDown: onKeyDown\n  };\n\n  if (showDrop) {\n    keyboardProps.onEnter = function (event) {\n      // prevent submitting forms via Enter when the drop is open\n      event.preventDefault();\n      if (activeSuggestionIndex >= 0) setValueFromSuggestion(event, suggestions[activeSuggestionIndex]);else closeDrop();\n    };\n\n    if (activeSuggestionIndex > 0) keyboardProps.onUp = onPreviousSuggestion;\n    if (activeSuggestionIndex < suggestions.length - 1) keyboardProps.onDown = onNextSuggestion;\n    keyboardProps.onTab = closeDrop;\n  } else if (suggestions && suggestions.length > 0) {\n    keyboardProps.onDown = openDrop;\n  } // For the Keyboard target below, if we have focus,\n  // either on the input element or within the drop,\n  // then we set the target to the document,\n  // otherwise we only listen to onDown on the input element itself,\n  // primarily for tests.\n\n\n  return /*#__PURE__*/React.createElement(StyledTextInputContainer, {\n    plain: plain\n  }, showStyledPlaceholder && /*#__PURE__*/React.createElement(StyledPlaceholder, null, placeholder), icon && /*#__PURE__*/React.createElement(StyledIcon, {\n    reverse: reverse,\n    theme: theme\n  }, icon), /*#__PURE__*/React.createElement(Keyboard, _extends({\n    target: focus ? 'document' : undefined\n  }, keyboardProps), /*#__PURE__*/React.createElement(StyledTextInput, _extends({\n    \"aria-label\": a11yTitle,\n    ref: inputRef,\n    id: id,\n    name: name,\n    autoComplete: \"off\",\n    plain: plain,\n    placeholder: typeof placeholder === 'string' ? placeholder : undefined,\n    icon: icon,\n    reverse: reverse,\n    focus: focus,\n    textAlign: textAlign\n  }, rest, extraProps, {\n    defaultValue: renderLabel(defaultValue),\n    value: renderLabel(value),\n    readOnly: readOnly,\n    onFocus: function onFocus(event) {\n      // Don't do anything if we are acting like we already have\n      // focus. This can happen when this input loses focus temporarily\n      // to our drop, see onBlur() handler below.\n      if (!focus) {\n        setFocus(true);\n\n        if (suggestions && suggestions.length > 0) {\n          announce(messages.suggestionsExist);\n          openDrop();\n        }\n\n        if (_onFocus) _onFocus(event);\n      }\n    },\n    onBlur: function onBlur(event) {\n      // Only treat it as a blur if the element receiving focus\n      // isn't in our drop. The relatedTarget will be our drop\n      // when the user clicks on a suggestion or interacts with the\n      // scrollbar in the drop.\n      if (!event.relatedTarget || event.relatedTarget !== dropRef.current) {\n        setFocus(false);\n        if (_onBlur) _onBlur(event);\n      }\n    },\n    onChange: readOnly ? undefined : function (event) {\n      // when TextInput is not contained in a Form, no re-render\n      // will come from this onChange and remove the placeholder\n      // so we need to update state to ensure the styled\n      // placeholder only appears when there is no value\n      setShowStyledPlaceholder(placeholder && typeof placeholder !== 'string' && !event.target.value);\n      setValue(event.target.value);\n      setActiveSuggestionIndex(-1);\n      if (onChange) onChange(event);\n    }\n  }))), drop);\n});\nTextInput.displayName = 'TextInput';\nvar TextInputDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  TextInputDoc = require('./doc').doc(TextInput);\n}\n\nvar TextInputWrapper = TextInputDoc || TextInput;\nexport { TextInputWrapper as TextInput };"]},"metadata":{},"sourceType":"module"}